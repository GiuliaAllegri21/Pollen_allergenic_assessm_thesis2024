### Title: ...
### Authors: Giulia Allegri, Ulisse Gomarasca
### Start of script ------------------------------------------------------------
rm(list = ls(all = T))
setwd("/Users/Zuli/Desktop/PollenR/data")


### Utilities ------------------------------------------------------------------
library(dplyr)
library(ggplot2)
library(ggrepel)
library(viridis)
library(lubridate)
library(readr)
library(readxl)
library(tidyverse)
library(AeRobiology)
library(MuMIn)
library(plotly)
# Function to normalize data
min_max_norm <- function(x) {
  (x - min(x, na.rm = T)) / (max(x, na.rm = T) - min(x, na.rm = T))}



### Data -----------------------------------------------------------------------
## Dati meteo siti ----
dat_malghe <- read_csv(
  "dati_meteo_AiRabbi_new2.csv", na= "NULL") %>% 
  # col_types = c("text", "date", "numeric", "numeric", "numeric")) %>% 
#add year#
  mutate(year = lubridate::year(date)
  ) %>% 
  rename(site= id_centr, temp= out_temp)%>% 
  dplyr::filter(year==2023) %>% 
  select(-year) %>% 
  glimpse()
  
###          
dat_villa <- read_xlsx(
  "meteo Villa Welsperg.xlsx",
  col_types = c("text", "text", "numeric", "numeric", "text")
  ) %>% 
  mutate(date = mdy_hm(date)
  ) %>%
  glimpse()


# dat_altissimo <- read_csv("altissimo(1).csv", skip = 4, show_col_types = F) %>% 
#   rename(date = `...2`, temp = Temperature, humidity = Humidity) %>% 
#   mutate(site = "Rifugio Altissimo") %>%
#   select( -Proprietà, -`Maximum Temperature`  , -`Minimum Temperature`, -`Maximum Humidity`, -`Minimum Humidity`,
#           -`Dew Point`) %>%
#   glimpse()



dat_cevedale <- read_csv("cevedale.csv", skip = 4, show_col_types = F) %>% 
  rename(date = `...2`, temp= Temperature, humidity = Humidity) %>% 
  mutate(site= "Rifugio Larcher al Cevedale") %>%
  select( -Proprietà, -`Maximum Temperature`  , -`Minimum Temperature`, -`Maximum Humidity`, -`Minimum Humidity`,
          -`Dew Point`) %>%
glimpse()

# fumo #
dat_fumo <- read_csv("fumo.csv", skip = 4, show_col_types = F) %>% 
  rename(date = `...2`, temp= Temperature, humidity = Humidity) %>% 
  mutate(site= "Val di Fumo") %>%
  select( -Proprietà, -`Maximum Temperature`  , -`Minimum Temperature`,
          -`Maximum Humidity`, -`Minimum Humidity`,
          -`Dew Point`) %>%
  glimpse()

#rosetta #
dat_rosetta <- read_csv("rosetta.csv", skip = 4, show_col_types = F) %>% 
  rename(date = `...2`, temp= Temperature, humidity = Humidity) %>% 
  mutate(site= "Rifugio Rosetta") %>%
  select( -Proprietà, -`Maximum Temperature`  , -`Minimum Temperature`, -`Maximum Humidity`, -`Minimum Humidity`,
          -`Dew Point`) %>%
  glimpse()

## aggiunto dati pioggia ##
dat_rosetta2 <- read_xlsx("rosetta2.xlsx", skip= 2) %>% 
  rename(date = `Date`, rain= `Pioggia (mm)`, temp= `Temp. aria (°C)`
         ) %>% 
  drop_na(date) %>% 
  mutate(date = parse_date_time(date, orders = "H:M:S d/m/y"), 
         rain= as.double(rain), temp= as.double(temp)) %>% 
  select(-...3, -temp, -...5, -...6) %>% 
  mutate( site= "Rifugio Rosetta") %>% 
  glimpse()


  ## san michele #
dat_sanmic <- read_xlsx("Meteo San Michele 1989_2023.xlsx") %>% 
  rename( wind_speed= wind_mean ) %>% 
  mutate(site= "San Michele all'Adige") %>%
  glimpse()

#rabbi 2021#
dat_rabbi <- read_xlsx("rabbi.xlsx", skip = 2, col_types = c("text", 
                 "numeric", "numeric", "numeric", "numeric", "numeric", "numeric",
                 "text"))%>% 
 rename(date = `Date`, rain= `Pioggia (mm)`,temp =`Temp. aria (°C)`, 
          wind_speed =`Vel. Vento (m/s)`) %>% 
  mutate(date = parse_date_time(date, orders = "H:M:S d/m/y")) %>% 
  select( -...3  , -...5, -...7, -...8) %>%
  mutate(site= "Bagni di Rabbi") %>%
  na.omit() %>% 
  glimpse()

  
# terzolas proviamo e son da togliere le colonne in eccesso# 
  dat_terzolas <- read_xlsx("terzolas_raw.xlsx", skip = 2, col_types = c("text", "numeric", "numeric", "numeric",
                 "numeric", "numeric","numeric", "numeric", "numeric",
                 "numeric", "numeric", "text")) %>%
    rename (date= Date, rain= `Pioggia (mm)`,temp =`Temp. aria (°C)`, humidity= `Umid.relat. aria (%)` , 
            wind_direction=`Dir. Vento (°)`,
          wind_speed =`Vel. Vento (m/s)`
          ) %>% 
    mutate(date = parse_date_time(date, orders = "H:M:S d/m/y")) %>% 
    select( -...3  , -...5, -...7, -...9,-...11, -...12 ) %>%
    na.omit() %>% 
    mutate(site= "Terzolas") %>%
    glimpse()
  
## Arco added##
  dat_arco <- read_xlsx("Arco.xlsx", col_types =c("text","text", "numeric",
                        "numeric")) %>% 
    mutate(date = parse_date_time(date, orders = "H:M:S d/m/y")) %>%
    glimpse()
           
# castel thun##
  
  dat_thun<- read_xlsx("castelthun.xlsx", col_types =c("text","numeric", "numeric")) %>% 
    mutate(date = parse_date_time(date, orders = "H:M:S d/m/y"), site= "Castel Thun") %>%
    glimpse()
  
## Dati pollini -----
siti_pollen <- read_xlsx("siti_Poaceae_modif1.xlsx", trim_ws = T, 
                         col_types= c("text", "date", "numeric", "text","numeric","numeric")) %>% 
    rename(elevation= Elevation, date= start_date, week=start_week) 

#   #villa pollen only july##
# villa_pollen <- read_csv("Villa_pollen.csv") %>% 
#   rename(date= start_date) %>% 
# glimpse()
#          
# villa_pollen_july = select(villa_pollen, site, date, sampler, Poaceae)
# villa_pollen_july
# 
# 
# #joining the df##
# siti_pollen_all <- left_join(
#   siti_pollen, villa_pollen_july,
#   by = c("date")) %>% 
#   glimpse()
  
## plot of pollinic data trough the years ##-----------------
plot(siti_pollen)  
 siti_pollen %>% 
    ggplot(aes(x = elevation, y = Poaceae)) +
    geom_point(aes(color = sampler), shape = 1, size = 3, stroke = 1, na.rm = T) +
    geom_smooth(color = "orange2", method = "lm", na.rm = T) +
    scale_colour_viridis_d() +
    theme_bw()  

##ELEVATION##
# # sampler_pollen<- ggplot(dat_all, aes(x= sampler, y=Poaceae, size= Poaceae, 
#                                    col= site, group= sampler)) +
#    geom_point(aes(col= site), alpha=0.6) + 
#    geom_smooth(method= "lm", linewidth= 0.5, se= FALSE) 
#  theme_test()
#  ggplotly() 
 
 
 
## Normalize data pollens ----
# Do this step before to immediately make 2 sampler comparable
siti_pollen <- siti_pollen %>% 
  group_by(sampler) %>% # first normalize pollen data by sampler
  mutate(
    Poaceae = min_max_norm(Poaceae) # NB: will result in 2 values where site has both samplers
  ) %>%
  ungroup() %>% 
  glimpse()



### Merge data meteo -----------------------------------------------------------
dat_meteo <- bind_rows(
  dat_arco,
  dat_cevedale,
  dat_fumo,
  dat_malghe,
  dat_rabbi,
  dat_rosetta,
  dat_rosetta2,
  dat_sanmic,
  dat_terzolas,
  dat_thun,
  dat_villa
) %>%
  select(site, date, temp, humidity, rain, wind_speed) %>% 
  glimpse()
view(dat_meteo)
# NB: mancano dati meteo per Terzolas
#recuperati

## aggregate to site for metereological table##
dat_meteo_mean <- dat_meteo %>% 
  mutate(year = lubridate::year(date), month=lubridate:: month(date)) %>% 
  dplyr::filter(month>=4 & month<=8) %>% 
  group_by(site, year) %>% 
  summarise(temp_mean = mean(temp, na.rm = T),
            temp_sd=sd(temp, na.rm=T),
            rain_sum= sum(rain, na.rm = T), 
            rain_sd=sd(rain, na.rm=T),
            wind_speed_mean = mean(wind_speed, na.rm = T),
            wind_speed_sd=sd(wind_speed, na.rm=T))%>% 
  ungroup() %>% 
  group_by(site) %>% 
  summarise(temp = mean(temp_mean, na.rm = T), 
            temp_sd = mean(temp_sd, na.rm = T),
            rain = mean(rain_sum, na.rm = T),
            rain_sd=mean(rain_sd, na.rm=T),
            wind_speed = mean(wind_speed_mean, na.rm = T),
            wind_speed_sd=mean(wind_speed_sd, na.rm=T)) %>% 
  ungroup() %>% 
  mutate( # convert NaN to NA
    across(
      .cols = where(is.double),
      .fns = ~ if_else(
        condition = is.nan(.x),
        true = NA_real_,
        false = .x
      )
    )
  )


### Aggregate to weekly --------------------------------------------------------
dat_meteo_agg <- dat_meteo %>% 
  mutate(year = lubridate::year(date),
         week = week(date)
         ) %>% 
  group_by(site, week, year) %>% 
  summarise(temp = mean(temp, na.rm = T), 
            rain = sum(rain, na.rm = T), 
            wind_speed = mean(wind_speed, na.rm = T),
            humidity = mean(humidity, na.rm = T)
            ) %>% 
  ungroup() %>% 
  mutate( # convert NaN to NA
    across(
    .cols = where(is.double),
    .fns = ~ if_else(
      condition = is.nan(.x),
      true = NA_real_,
      false = .x
      )
    )
  )

siti_pollen_agg <- siti_pollen %>% 
  mutate(year = lubridate::year(date)) %>% 
  group_by(site, week, year, sampler) %>% 
  summarise(Poaceae = mean(Poaceae, na.rm = T), 
            elevation = mean(elevation, na.rm = T)
            ) %>% 
  ungroup() %>% 
  mutate( # convert NaN to NA
    across(
      .cols = where(is.double),
      .fns = ~ if_else(
        condition = is.nan(.x),
        true = NA_real_,
        false = .x
      )
    )
  )


### Merge all data -------------------------------------------------------------
dat_all <- left_join(
  siti_pollen_agg, dat_meteo_agg,
  by = c("site", "year", "week")
) %>% 
  relocate(year, week, .after = site) %>%
  glimpse()
view(dat_all)

### Add peak week and pre-peak-week aggregations -------------------------------
peak_week <- dat_all %>% 
  group_by(site, year, sampler) %>% 
  dplyr::filter(Poaceae == max(Poaceae, na.rm = T)) %>% 
  ungroup() %>% 
  select(site, year, week) %>% 
  rename(peak_week = week)
view(peak_week)


## ALL SITES plot with peak_week and sites_pollen for understanding # -----------
##the peak during the year##
dat_all %>% 
dplyr::filter(year == 2022 & week > 10 & week < 40)%>%
ggplot(aes(x= week, y= Poaceae, col=sampler, group= sampler)) + 
  geom_point(na.rm = T , alpha= 0.8, size= 4) +
  geom_smooth(size=0.4, linetype= 1, col= "red") +
  labs(x ="weeks", y = "Normalized Poaceae pollen concentration [-]")+
  theme_bw()+
  facet_wrap(. ~ site) +
  scale_y_log10() +
  theme_bw(base_size = 18)

  

# ## sito san michele##
# dat_all %>% 
#   dplyr::filter(site== "Villa Welsperg") %>% 
#   ggplot(aes(x= year, y= peak_week))+ 
#   geom_point(na.rm = T , alpha= 0.6, size= 4) +
#   geom_line(size=0.4, linetype= 1, col= "red")+
#   scale_y_log10() + 
#   scale_colour_viridis_c()



##LINEAR ##
# plot(x=dat_all$year, y= dat_all$Poaceae, type="o", 
#      col= "red1", 
#      lwd=1, xlab=" Year", ylab="Poaceae", main="Trend")
# 
# plot_trend(dat_all, interpolation = TRUE, int.method = "lineal",
#            export.plot = TRUE, export.format = "pdf", export.result = TRUE,
#            method = "percentage")

# ##pollen season analysis wit AeRobiology package## ??-----
# ## calculate_ps(siti_pollen_agg, method = "percentage", th.day = 100, perc = 95,
#              def.season = "natural", reduction = FALSE, red.level = 0.9,
#              derivative = 5, man = 11, th.ma = 5, n.clinical = 5,
#              window.clinical = 7, window.grains = 5, th.pollen = 10,
#              th.sum = 100, type = "none", interpolation = TRUE,
#              int.met=hod = "lineal", maxdays = 30, result = "table",
#              plot = TRUE, export.plot = FALSE, export.result = FALSE)


## Left join for peak_week df and our data with pollen and meteo
pre_peak_data <- left_join(dat_all, peak_week, by = c("site", "year"))

## Filter pre-peak week meteo data (12 weeks)
pre_peak_data <- pre_peak_data %>%
  dplyr::filter(week <= peak_week & week > peak_week - 12)
view(pre_peak_data)

## Aggregate the meteo data to pre-peak week meteo data the 12 weeks of interest
pre_peak_data <- pre_peak_data %>% 
  mutate(rain_peak= if_else(condition= week== peak_week, true= rain, false= NA_real_)) %>% 
  group_by(site, year) %>% 
  reframe(
    Poaceae = mean(Poaceae, na.rm = T),
    elevation = mean(elevation, na.rm = T),
    temp = mean(temp, na.rm = T),
    rain_sum= sum(rain, na.rm = T),
    rain_peak= mean(rain_peak, na.rm= T),
    wind_speed = mean(wind_speed, na.rm = T),
    peak_week = unique(peak_week),
    sampler = unique(sampler)) %>% 
  ungroup() %>% 
  mutate( # convert NaN to NA
    across(
      .cols = where(is.double),
      .fns = ~ if_else(
        condition = is.nan(.x),
        true = NA_real_,
        false = .x
      )
    )
  ) %>% 
  glimpse()
view(pre_peak_data)


### Scatterplots ---------------------------------------------------------------
# We can plot with the original weather data, or with the pre-peak-week aggregated data
# E.g.:
# dat_all %>% 
#   ggplot(aes(x = temp, y = log(Poaceae))) +
#   geom_point(aes(color = wind_speed), shape = 1, na.rm = T) +
#   geom_smooth(color = "green3", method = "lm", na.rm = T) +
#   xlab("Temperature") +
#   theme_bw()
# 
# ## elevation temp and poaceae# dat all 
# dat_all %>% 
#   ggplot(aes(x = temp, y = Poaceae)) +
#   geom_point(aes(color = elevation), shape = 19, na.rm = T) +
#   geom_smooth(color = "gold2", method = "lm", na.rm = T) +
#   xlab("Temperature") +
#   ggtitle("Poaceae not in pre preak week in correlation with temperature,
#   elevation value as third variable")+
#   scale_y_log10()+
#   theme_bw()
# 
# ## temperature with sampler as color## year 2022 weeks: 10-40 ##
# dat_all %>% 
#   dplyr::filter(year == 2022 & week > 10 & week < 40) %>% 
#   ggplot(aes(x = temp, y = log(Poaceae))) +
#   geom_point(aes(color = sampler), shape = 1, na.rm = T) +
#   geom_smooth(color = "green4", method = "lm", na.rm = T) +
#   xlab("Temperature") +
#   theme_bw()
# 
# ## temperature with sampler as color##
# dat_all %>% 
#   ggplot(aes(x = temp, y = log(Poaceae))) +
#   geom_point(aes(color = sampler), shape = 1, na.rm = T) +
#   geom_smooth(color = "green4", method = "lm", na.rm = T) +
#   xlab("Temperature") +
#   theme_bw()

#temp and elevation as col week 10-30-->modifying the site we can observe how the peak changes##
# pre_peak_data %>% 
#   dplyr::filter(site== "San Michele all'Adige" & year > 1989 & year < 2023) %>% 
#   ggplot(aes(x = peak_week, y = year)) +
#   geom_point(aes(color = temp), shape = 19, size= 5, alpha= 3, na.rm = T) +
#   geom_smooth(color = "red", method = "lm", na.rm = T) +
#   coord_cartesian(ylim = c(1989, 2023))+
#   scale_y_log10()+
#   xlab("peak week") 
#   theme_bw()

#temp and elevation as col ##
# dat_all %>% 
#   dplyr::filter(year == 2022  & week > 10 & week < 30) %>% 
#   ggplot(aes(x = week, y = log(Poaceae))) +
#   geom_point(aes(color = elevation), shape = 8, size= 5, alpha= 3, na.rm = T) +
#   geom_smooth(color = "green", method = "lm", na.rm = T) +
#   xlab("week") +
#   scale_y_log10()+
#   ggtitle("2022 Poaceae trend correlated with week and elevation gain" )
#   theme_bw()


##Pollen trend and temperature, elev as color (division)##
# dat_all %>% 
#   ggplot(aes(x = temp, y = Poaceae)) +
#   geom_point(aes(color = elevation), shape = 19, na.rm = T) +
#   geom_smooth(color = "green3", method = "lm", na.rm = T) +
#   xlab("Temperature") +
#   ggtitle("Temperature and Pollen Trend, with elevation as third factor")+
#   scale_y_log10()+
#   theme_bw()

# ## rain normal with sampler as color with all the data not normalized##
# dat_all %>% 
#   ggplot(aes(x = rain, y = Poaceae)) +
#   geom_point(aes(color = temp), shape = 1, na.rm = T) +
#   geom_smooth(color = "red2", method = "lm", na.rm = T) +
#   xlab("Rain") +
#   scale_y_log10()+
#   theme_bw()



## temp_elev data not pre peak date #
# dat_all %>% 
#   ggplot(aes(x = elevation, y = log(Poaceae))) +
#   geom_point(aes(color = temp), shape = 1, na.rm = T) +
#   geom_smooth(color = "red2", method = "lm", na.rm = T) +
#   xlab("Elevation") +
#   theme_bw()

##wind_speed in all data not normalized #
# dat_all%>% 
#   ggplot(aes(x = wind_speed, y = log(Poaceae))) +
#   geom_point(aes(color = sampler), shape = 1, na.rm = T) +
#   geom_smooth(color = "green2", method = "lm", na.rm = T) +
#   xlab("wind_speed") +
#   theme_bw()
# 
# # wind with temp#
# dat_all %>% 
#   ggplot(aes(x = wind_speed, y = log(Poaceae))) +
#   geom_point(aes(color = temp), shape = 1, na.rm = T) +
#   geom_smooth(color = "red3", method = "lm", na.rm = T) +
#   xlab("wind_speed") +
#   theme_bw()


## elevation and site distribution in pre peak dates, to understand which factor maybe##
##influenced before the peak ##
pre_peak_data %>% 
  dplyr::filter(site==site) %>% 
  ggplot(aes(x = peak_week, y = elevation )) +
  geom_point(aes(color= site), shape = 19, size = 6,
               na.rm = T) +
  geom_smooth(color = "red2", method = "lm", na.rm = T) +
  coord_cartesian(ylim = c(60, 2800))+  
  scale_colour_viridis_d() +
  scale_y_log10()+
  theme_minimal() +                         
  labs(x = "peak week", y= "elevation (m.a.s.l)") +
  theme_bw() +
  theme_bw(base_size = 18)


## temperature$ year and peak_week##
pre_peak_data  %>%
  ggplot(aes(x = peak_week, y = temp )) +
  geom_point(aes(color= elevation), shape = 19, size = 6,
             na.rm = T) +
  geom_smooth(color = "red2", method = "lm", na.rm = T) +
  scale_colour_viridis_c() +
  scale_y_log10()+
  labs(x = "peak week", y= "TEMP") +
  theme_bw()


#elevation and distribution#
pre_peak_data %>% 
  ggplot(aes(x = peak_week, y = elevation )) +
  geom_point(aes(color = Poaceae), shape = 8, size = 3, stroke = 1, na.rm = T) +
  geom_smooth(color = "red2", method = "lm", na.rm = T) +
  coord_cartesian(xlim = c(20, 35), ylim = c(100, 2800))
  scale_colour_viridis_c()+
  scale_y_log10()+
  theme_bw()



## sites##
# dat_all %>% 
#   ggplot(aes(x = temp, y = Poaceae )) +
#   geom_point(aes(color = site), shape = 8, size = 3, stroke = 1, na.rm = T) +
#   geom_smooth(color = "red2", method = "lm", na.rm = T) +
#   scale_colour_viridis_d() +
#   scale_y_log10() +
#   theme_bw()

# # only san michele ##
# pre_peak_data %>% 
#   dplyr::filter(site == "San Michele all'Adige") %>% 
#   ggplot(aes(x = peak_week, y = Poaceae )) +
#   geom_point(aes(color = temp), shape = 8, size = 3, stroke = 1, na.rm = T) +
#   geom_smooth(color = "red2", method = "lm", na.rm = T) +
#   ggtitle("San Michele Trend")+
#   scale_y_log10() +
#   scale_colour_viridis_c() +
#   scale_y_log10() +
#   theme_bw()
#   
# #sampler#
# pre_peak_data %>% 
#   ggplot(aes(x = peak_week, y = Poaceae)) +
#   geom_point(aes(color = sampler), shape = 19, size = 3, stroke = 1, na.rm = T) +
#   geom_smooth(color = "red", method = "lm", na.rm = T) + 
#   ggtitle("Poaceae trend in relationship with peak_week and differenciated by sampler")+
#   scale_colour_viridis_d() +
#   scale_y_log10() +
#   theme_bw()

## vectors creation for boxplot labels##
dat_n <- pre_peak_data %>% 
  group_by(site, sampler) %>%
  count() %>%
  ungroup() 

# ## boxplot poaceae conc and sites##
#  pre_peak_data %>% 
#    ggplot(aes(y = Poaceae, x= site, color = sampler )) +
#   geom_jitter(color= "grey50", alpha= 0.2)+
#   geom_boxplot( na.rm = T, fill= NA) +
#    scale_x_discrete(guide = guide_axis(angle = 90)) +
#   scale_y_log10() +
#    theme_bw() +
#    theme(axis.text.x=element_text(size=rel(1.5)), axis.text.y=element_text(size=rel(1.5))) +
#    labs(y= "Poaceae [-]")

 
 
 ## boxplot of peak week and sites##
 pre_peak_data %>% 
   ggplot(aes(y = peak_week, x= site, color = sampler )) +
   geom_boxplot( na.rm = T, fill= NA) +
   scale_x_discrete(guide = guide_axis(angle = 90)) +
   scale_y_log10() +
   labs(y= "peak week") +
   theme_bw() +
   theme(axis.text.x=element_text(size=rel(1.5)), 
         axis.text.y=element_text(size=rel(1.5))) 
 

## rain with temperature as color, gives the distribution another connotation# 
# during a period of 12 weeks before the peak week##

# pre_peak_data %>% 
#   ggplot(aes(x = rain_peak, y = Poaceae)) +
#   geom_point(aes(color = temp), shape = 8, size = 3, stroke = 1, na.rm = T) +
#   geom_smooth(color = "orange2", method = "lm", na.rm = T) +
#   scale_colour_viridis_c() +
#   scale_y_log10() +
#   theme_bw()


#wind_speed#
# pre_peak_data %>% 
#   ggplot(aes(x = temp, y = log(Poaceae))) +
#   geom_point(aes(color = wind_speed), shape = 8, size = 3, stroke = 1, na.rm = T) +
#   geom_smooth(color = "orange2", method = "lm", na.rm = T) +
#   scale_colour_viridis_c() +
#   theme_bw()

## temp_log useful for analyse exponential relations in our models##-----------------------
pre_peak_data <- pre_peak_data %>% 
  mutate(temp_log = log(temp)) %>% 
  glimpse()

### Normalize metereological data ------------------------------------------------------------
dat_all_norm <- dat_all %>% # normalize meteo data
  mutate( # normalize variables without sampler grouping
    elevation = min_max_norm(elevation),
    temp = min_max_norm(temp),
    rain = min_max_norm(rain),
    wind_speed = min_max_norm(wind_speed)) %>% 
  mutate( # convert NaN to NA
    across(
      .cols = where(is.double),
      .fns = ~ if_else(
        condition = is.nan(.x),
        true = NA_real_,
        false = .x
      )
    )
  ) %>% 
  glimpse()

# norm pre peak data #
pre_peak_norm <- pre_peak_data %>% 
  mutate( # normalize variables without sampler grouping
    elevation = min_max_norm(elevation),
    temp = min_max_norm(temp),
    temp_log= min_max_norm(temp_log),
    rain_sum = min_max_norm(rain_sum),
    rain_peak = min_max_norm(rain_peak),
    wind_speed = min_max_norm(wind_speed)
  ) %>% 
  mutate( # convert NaN to NA
    across(
      .cols = where(is.double),
      .fns = ~ if_else(
        condition = is.nan(.x),
        true = NA_real_,
        false = .x
      )
    )
  ) %>% 
  glimpse()


### Linear Models --------------------------------------------------------------
# NB: humidity has most of the NAs, consider not using it in the analysis

# NB2: we can do the analysis on pre-peak data (data = pre_peak_norm)....
model_test_peak <- lm(formula = "peak_week ~ temp * rain_sum * wind_speed * elevation * rain_peak",
                      data = pre_peak_norm, na.action = na.omit
                      )
summary(model_test_peak)
AICc(model_test_peak)


## using the + to analyze the single interaction btw by variable and my predicted value## 
model_test_peak_plus <- lm(formula = "peak_week ~ temp + rain_sum + wind_speed + elevation + rain_peak",
                      data = pre_peak_norm, na.action = na.omit)
summary(model_test_peak_plus)
AICc(model_test_peak_plus)



## lets try just few combinations ##
model_test_peak1 <- lm(formula = "peak_week ~ temp * rain_peak",
                      data = pre_peak_norm, na.action = na.omit)
summary(model_test_peak1)
AICc(model_test_peak1)


model_test_peak1_log <- lm(formula = "peak_week ~ temp_log * rain_peak",
                       data = pre_peak_norm, na.action = na.omit)
summary(model_test_peak1_log)
AICc(model_test_peak1_log)

# model_test_peak1_log_sum <- lm(formula = "peak_week ~ temp_log * rain_sum",
#                        data = pre_peak_norm, na.action = na.omit)
# summary(model_test_peak1_log_sum)
# AICc(model_test_peak1_log_sum)
## with +#

model_test_peak_plus1<- lm(formula = "peak_week ~ temp + rain_peak",
                        data = pre_peak_norm, na.action = na.omit)
summary(model_test_peak_plus1)
AICc(model_test_peak_plus1)

# model_test_peak_plus1_sum_log<- lm(formula = "peak_week ~ temp_log + rain_sum",
#                            data = pre_peak_norm, na.action = na.omit)
# summary(model_test_peak_plus1_sum_log)
# AICc(model_test_peak_plus1_sum_log)

# model test 2# 
model_test_peak2 <- lm(formula = "peak_week ~ temp * rain_peak * wind_speed",
                       data = pre_peak_norm, na.action = na.omit
)
summary(model_test_peak2)
AICc(model_test_peak2)

##sum rain2 included#
# model_test_peak2_sum <- lm(formula = "peak_week ~ temp * rain_sum * wind_speed",
#                        data = pre_peak_norm, na.action = na.omit
# )
# summary(model_test_peak2_sum)
# AICc(model_test_peak2_sum)

# model test 2 with + ##
model_test_peak_plus2 <- lm(formula = "peak_week ~ temp + rain_peak + wind_speed",
                       data = pre_peak_norm, na.action = na.omit
)
summary(model_test_peak_plus2)
AICc(model_test_peak_plus2)
## log temp 2##
# model_test_peak_plus2_log <- lm(formula = "peak_week ~ temp_log + rain_peak + wind_speed",
#                             data = pre_peak_norm, na.action = na.omit
# )
# summary(model_test_peak_plus2_log)
# AICc(model_test_peak_plus2_log)

##sum rain 2#
# model_test_peak_plus2_sum <- lm(formula = "peak_week ~ temp + rain_sum + wind_speed",
#                             data = pre_peak_norm, na.action = na.omit
# )
# summary(model_test_peak_plus2_sum)
# AICc(model_test_peak_plus2_sum)

# model 3 #
model_test_peak3 <- lm(formula = "peak_week ~  rain_sum * elevation * temp",
                       data = pre_peak_norm, na.action = na.omit)

summary(model_test_peak3)
AICc(model_test_peak3)

##log##

# model_test_peak3_log <- lm(formula = "peak_week ~  rain_sum * elevation * temp_log",
#                        data = pre_peak_norm, na.action = na.omit)
# 
# summary(model_test_peak3_log)
# AICc(model_test_peak3_log)

# model 3 with + ##
model_test_peak_plus3 <- lm(formula = "peak_week ~  rain_sum + elevation+  temp",
                       data = pre_peak_norm, na.action = na.omit)

summary(model_test_peak_plus3)
AICc(model_test_peak_plus3)

# model_test_peak_plus3_log <- lm(formula = "peak_week ~  rain_sum + elevation+  temp_log",
#                             data = pre_peak_norm, na.action = na.omit)
# 
# summary(model_test_peak_plus3_log)
# AICc(model_test_peak_plus3_log)

# model 4# 
model_test_peak4 <- lm(formula = "peak_week ~  rain_peak * elevation * temp",
                       data = pre_peak_norm, na.action = na.omit)

summary(model_test_peak4)
AICc(model_test_peak4)

# model_test_peak4_sum <- lm(formula = "peak_week ~  rain_sum * elevation * temp",
#                        data = pre_peak_norm, na.action = na.omit)
# 
# summary(model_test_peak4_sum)
# AICc(model_test_peak4_sum)

# model_test_peak4_log <- lm(formula = "peak_week ~  rain_peak * elevation * temp_log",
#                        data = pre_peak_norm, na.action = na.omit)
# 
# summary(model_test_peak4_log)
# AICc(model_test_peak4_log)

#model 4 ++ ##
model_test_peak_plus4 <- lm(formula = "peak_week ~  rain_peak + elevation + temp",
                       data = pre_peak_norm, na.action = na.omit)

summary(model_test_peak_plus4)
AICc(model_test_peak_plus4)

# model_test_peak_plus4_log <- lm(formula = "peak_week ~  rain_peak + elevation + temp_log",
#                             data = pre_peak_norm, na.action = na.omit)
# 
# summary(model_test_peak_plus4_log)
# AICc(model_test_peak_plus4_log)

# summary of test multiplicated ## 

AICc(model_test_peak, model_test_peak1, model_test_peak2, model_test_peak3,
     model_test_peak4)

# summary of tests added## 
AICc(model_test_peak_plus, model_test_peak_plus1, model_test_peak_plus2, 
     model_test_peak_plus3, model_test_peak_plus4)

##trying with logarithmic temp values ##
model_test_peak_log <- lm(formula = "peak_week ~ temp_log * elevation",
                      data = pre_peak_norm, na.action = na.omit)
summary(model_test_peak_log)
AICc(model_test_peak_log)

##logarithmic but with addition# 
model_test_peak_log_plus <- lm(formula = "peak_week ~ temp_log + wind_speed + rain_peak + elevation",
                          data = pre_peak_norm, na.action = na.omit)
summary(model_test_peak_log_plus)
AICc(model_test_peak_log_plus)

# # ....or check with more data on all data (data = dat_all_norm) (but this is NOT the research question!)
#model_test_all <- lm(formula = "Poaceae ~ temp * rain * wind_speed * elevation",
      #            data = dat_all_norm, na.action = na.omit)
#summary(model_test_all)#
ct <- cor.test(pre_peak_data$elevation, pre_peak_data$temp_log, method = "pearson", 
               use= "complete.obs")
ct
## END ... for now ##
model_test_peak_nolog1<-(lm(formula = "peak_week ~ temp + elevation",
                         data = pre_peak_norm, na.action = na.omit))
summary(model_test_peak_nolog1)
AICc(model_test_peak_nolog1)


model_test_peak_nolog2<-(lm(formula = "peak_week ~ temp * elevation",
                            data = pre_peak_norm, na.action = na.omit))
summary(model_test_peak_nolog2)
AICc(model_test_peak_nolog2)


# log just elev and T ##

model_test_peak_log_elevT <- lm(formula = "peak_week ~ temp_log * elevation",
                          data = pre_peak_norm, na.action = na.omit)
summary(model_test_peak_log_elevT)
AICc(model_test_peak_log_elevT)

##logarithmic but with addition# 
model_test_peak_log_plus_elevT <- lm(formula = "peak_week ~ temp_log + elevation",
                               data = pre_peak_norm, na.action = na.omit)
summary(model_test_peak_log_plus_elevT)
AICc(model_test_peak_log_plus_elevT)

###
